# COPY AND PASTE
# http://robots.thoughtbot.com/tmux-copy-paste-on-os-x-a-better-future
#
# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel 'xclip -i'
bind-key -T copy-mode-vi 'r' send -X rectangle-toggle

bind ] run "xclip -o | tmux load-buffer - ; tmux paste-buffer"

set-option -s set-clipboard off
############################################################################
# Reset Prefix
############################################################################
set -g prefix C-a
bind-key a send-prefix # for nested tmux sessions

############################################################################
# Global options
############################################################################
# large history
set-option -g history-limit 10000

# colors
set-option -sa terminal-overrides ",xterm*:Tc"
setw -g mode-style bg=black
set-option -g default-terminal "screen-256color"
set-option -g pane-active-border-style fg=green

# basic settings
set-window-option -g xterm-keys on # for vim
set-window-option -g mode-keys vi # vi key
set-window-option -g monitor-activity on
setw -g window-status-current-style fg=#ffffff,bg=#004444 #,reverse

# Automatically set window title
setw -g automatic-rename

set -g -q mouse on

############################################################################
# Status Bar
############################################################################
set-option -g status-justify left
set-option -g status-bg '#007070' # colour213 # pink
set-option -g status-fg '#cccccc'
set-option -g status-interval 5
set-option -g status-left-length 50
set-option -g status-left '#[bg=#005050]» #T #[bg=#005858] | #[bg=#006060] branch #(cd #{pane_current_path}; git rev-parse --abbrev-ref HEAD) |#[bg=#006868] '
set-option -g status-right '#[bg=#006c6c] #[bg=#006868] #[bg=#006464] #[bg=#006060] #[bg=#005c5c] #[bg=#005858] #[bg=#005858]#(curl wttr.in/?format="%%m(%%M)++%%c+%%t(%%f)")#[bg=#005050]  '
#set-option -g status-right '#[bg=#006c6c] #[bg=#006868] #[bg=#006464] #[bg=#006060] #[bg=#005c5c] #[bg=#005858] #[bg=#005858][ branch #(cd #{pane_current_path}; git rev-parse --abbrev-ref HEAD) ]#[bg=#005050]  '
#set-option -g status-right '[[ #(git branch) branch ]] »» ###S %R %m-%d#(acpi | cut -d ',' -f 2)'
set-option -g visual-activity on

# Titles (window number, program name, active (or not)
set-option -g set-titles on
set-option -g set-titles-string '#H:#S.#I.#P #W #T'


############################################################################
# Unbindings
############################################################################
unbind j
unbind C-b # unbind default leader key
#unbind '"' # unbind horizontal split
#unbind %   # unbind vertical split


############################################################################
# Bindings
############################################################################
# reload tmux conf
bind-key r source-file ~/.tmux.conf

# new split in current pane (horizontal / vertical)
bind-key - split-window -v # split pane horizontally
bind-key \\ split-window -h # split pane vertically
bind-key \| split-window -h # split pane vertically
bind-key _ split-window -h # split pane horizontally
bind-key '"' split-window -v
bind-key % split-window -h

# list panes
bind-key Space list-panes

# break-pane
bind-key Enter break-pane

# join-pane [-dhv] [-l size | -p percentage] [-s src-pane]
# [-t:dst-window.dst-pane] (destination window (dot) destination pane
#                (alias: joinp)
#
bind-key Space command-prompt "joinp -t:%%" # %% = prompt for window.pane [-V|H] # vert|hor split

#previous window
bind-key -n C-up prev
bind-key -n C-left prev

#next window
bind-key -n C-right next
bind-key -n C-down next

############################################################################
# windows
############################################################################
#bind C-j previous-window
#bind C-k next-window
bind-key C-a last-window # C-a C-a for last active window
bind A command-prompt "rename-window %%"
# By default, all windows in a session are constrained to the size of the 
# smallest client connected to that session, 
# even if both clients are looking at different windows. 
# It seems that in this particular case, Screen has the better default 
# where a window is only constrained in size if a smaller client 
# is actively looking at it.
setw -g aggressive-resize on

############################################################################
# panes
############################################################################
# Navigation ---------------------------------------------------------------
# use the vim motion keys to move between panes
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# Resizing ---------------------------------------------------------------
bind-key C-h resize-pane -L
bind-key C-j resize-pane -D
bind-key C-k resize-pane -U
bind-key C-l resize-pane -R

# use vim motion keys while in copy mode
setw -g mode-keys vi

############################################################################
# layouts
############################################################################
bind o select-layout "active-only"
bind M-- select-layout "even-vertical"
bind M-| select-layout "even-horizontal"
bind M-r rotate-window


# focus on first window
# select-window -t 0

